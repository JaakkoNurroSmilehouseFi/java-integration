package se.sveaekonomi.webpay.integration.hosted.helper;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;

import se.sveaekonomi.webpay.integration.hosted.payment.CardPayment;
import se.sveaekonomi.webpay.integration.hosted.payment.DirectPayment;
import se.sveaekonomi.webpay.integration.hosted.payment.FakeHostedPayment;
import se.sveaekonomi.webpay.integration.hosted.payment.HostedPayment;
import se.sveaekonomi.webpay.integration.hosted.payment.PayPagePayment;
import se.sveaekonomi.webpay.integration.order.create.CreateOrderBuilder;
import se.sveaekonomi.webpay.integration.order.row.OrderRowBuilder;
import se.sveaekonomi.webpay.integration.util.constant.COUNTRYCODE;
import se.sveaekonomi.webpay.integration.util.constant.PAYMENTMETHOD;

public class HostedXmlBuilderTest {

    HostedXmlBuilder xmlBuilder;
    private CreateOrderBuilder order;
    String xml;
    
    @Before
    public void setUp() {
        xmlBuilder = new HostedXmlBuilder();
        //orderBuilder = new OrderBuilder();
        xml = "";
    }
    
    @Test
    public void testXmlNoOrderRows() throws Exception {
       // ArrayList<OrderRowBuilder> orderRows = new ArrayList<OrderRowBuilder>();
        
        order = new CreateOrderBuilder();
       // order.setOrderRows(orderRows);
      //  order.addOrderRow(null);
        order.setCountryCode(COUNTRYCODE.SE);
        
        HostedPayment payment = new FakeHostedPayment(order);
        payment.calculateRequestValues();
        
        try {
            xml = xmlBuilder.getXml(payment);
        } catch (Exception e) {
            throw e;
        }
        
        final String EXPECTED_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><payment><returnurl></returnurl><amount>0</amount><vat>0</vat><excludepaymentmethods></excludepaymentmethods></payment>";
        assertTrue(EXPECTED_XML.equals(xml));
    }
    
    @Test
    public void testAmountXml() throws Exception {
        OrderRowBuilder row = new OrderRowBuilder();
        row.setAmountExVat(4)
            .setVatPercent(25)
            .setQuantity(1);
        
        ArrayList<OrderRowBuilder> orderRows = new ArrayList<OrderRowBuilder>();
        orderRows.add(row);
        
        order = new CreateOrderBuilder();
       // order.setOrderRows(orderRows);
        order.addOrderRow(row)
        	.setCountryCode(COUNTRYCODE.SE);
        
        HostedPayment payment = new FakeHostedPayment(order);
        payment.calculateRequestValues();
        
        try {
            xml = xmlBuilder.getXml(payment);
        } catch (Exception e) {
            throw e;
        }
        
        final String EXPECTED_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><payment><returnurl></returnurl><amount>500</amount><vat>100</vat><orderrows><row><sku></sku><name></name><description></description><amount>500</amount><vat>100</vat><quantity>1</quantity></row></orderrows><excludepaymentmethods></excludepaymentmethods></payment>";
        assertEquals(EXPECTED_XML, xml);
    }
    
    @Test
    public void testXmlCancelUrl() throws Exception {
        ArrayList<OrderRowBuilder> orderRows = new ArrayList<OrderRowBuilder>();
        
        order = new CreateOrderBuilder();
       // order.setOrderRows(orderRows);
     //   order.addOrderRow(null);
        order.setCountryCode(COUNTRYCODE.SE);
        
        HostedPayment payment = new FakeHostedPayment(order);
        payment.setCancelUrl("http://www.cancel.com");
        payment.calculateRequestValues();
        
        try {
            xml = xmlBuilder.getXml(payment);
        } catch (Exception e) {
            throw e;
        }
        
        final String EXPECTED_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><payment><returnurl></returnurl><cancelurl>http://www.cancel.com</cancelurl><amount>0</amount><vat>0</vat><excludepaymentmethods></excludepaymentmethods></payment>";
        assertTrue(EXPECTED_XML.equals(xml));
    }
    
    @Test
    public void testOrderRowXml() throws Exception {
        OrderRowBuilder row = new OrderRowBuilder();
        row.setArticleNumber("0")
            .setName("Product")
            .setDescription("Good product")
            .setAmountExVat(4)
            .setVatPercent(25)
            .setQuantity(1)
            .setUnit("kg");
        
        ArrayList<OrderRowBuilder> orderRows = new ArrayList<OrderRowBuilder>();
        orderRows.add(row);
        
        order = new CreateOrderBuilder();
       // order.setOrderRows(orderRows);
        order.addOrderRow(row)
        	.setCountryCode(COUNTRYCODE.SE);
        
        HostedPayment payment = new FakeHostedPayment(order);
        payment.calculateRequestValues();
        
        try {
            xml = xmlBuilder.getXml(payment);
        } catch (Exception e) {
            throw e;
        }
        
        final String EXPECTED_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><payment><returnurl></returnurl><amount>500</amount><vat>100</vat><orderrows><row><sku>0</sku><name>Product</name><description>Good product</description><amount>500</amount><vat>100</vat><quantity>1</quantity><unit>kg</unit></row></orderrows><excludepaymentmethods></excludepaymentmethods></payment>";
        assertTrue(EXPECTED_XML.equals(xml));
    }
    
    @Test
    public void testDirectPaymentSpecificXml() throws Exception {
        order = new CreateOrderBuilder();
        order.setCountryCode(COUNTRYCODE.SE);
        
        DirectPayment payment = new DirectPayment(order);
        payment.calculateRequestValues();
        
        try {
            xml = xmlBuilder.getXml(payment);
        } catch (Exception e) {
            throw e;
        }
        
        final String EXPECTED_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><payment><returnurl></returnurl><amount>0</amount><vat>0</vat><excludepaymentmethods><exclude>PAYPAL</exclude><exclude>KORTCERT</exclude><exclude>SKRILL</exclude><exclude>SVEAINVOICESE</exclude><exclude>SVEASPLITSE</exclude><exclude>SVEAINVOICEEU_SE</exclude><exclude>SVEASPLITEU_SE</exclude><exclude>SVEAINVOICEEU_DE</exclude><exclude>SVEASPLITEU_DE</exclude><exclude>SVEAINVOICEEU_DK</exclude><exclude>SVEASPLITEU_DK</exclude><exclude>SVEAINVOICEEU_FI</exclude><exclude>SVEASPLITEU_FI</exclude><exclude>SVEAINVOICEEU_NL</exclude><exclude>SVEASPLITEU_NL</exclude><exclude>SVEAINVOICEEU_NO</exclude><exclude>SVEASPLITEU_NO</exclude></excludepaymentmethods></payment>";
        assertTrue(EXPECTED_XML.equals(xml));
    }
    
    @Test
    public void testCardPaymentSpecificXml() throws Exception {
        order = new CreateOrderBuilder();
        order.setCountryCode(COUNTRYCODE.SE);
        
        CardPayment payment = new CardPayment(order);
        payment.calculateRequestValues();
        
        try {
            xml = xmlBuilder.getXml(payment);
        } catch (Exception e) {
            throw e;
        }
        
        final String EXPECTED_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><payment><returnurl></returnurl><amount>0</amount><vat>0</vat><excludepaymentmethods><exclude>SKRILL</exclude><exclude>PAYPAL</exclude><exclude>DBNORDEASE</exclude><exclude>DBSEBSE</exclude><exclude>DBSEBFTGSE</exclude><exclude>DBSHBSE</exclude><exclude>DBSWEDBANKSE</exclude><exclude>SVEAINVOICESE</exclude><exclude>SVEASPLITSE</exclude><exclude>SVEAINVOICEEU_SE</exclude><exclude>SVEASPLITEU_SE</exclude><exclude>SVEAINVOICEEU_DE</exclude><exclude>SVEASPLITEU_DE</exclude><exclude>SVEAINVOICEEU_DK</exclude><exclude>SVEASPLITEU_DK</exclude><exclude>SVEAINVOICEEU_FI</exclude><exclude>SVEASPLITEU_FI</exclude><exclude>SVEAINVOICEEU_NL</exclude><exclude>SVEASPLITEU_NL</exclude><exclude>SVEAINVOICEEU_NO</exclude><exclude>SVEASPLITEU_NO</exclude></excludepaymentmethods></payment>";
        assertEquals(EXPECTED_XML, xml);
    }
    
    @Test
    public void testPayPagePaymentSpecificXmlNullPaymentMethod() throws Exception {
        order = new CreateOrderBuilder();
        order.setCountryCode(COUNTRYCODE.SE);
        
        PayPagePayment payment = new PayPagePayment(order);
        payment.calculateRequestValues();
        
        try {
            xml = xmlBuilder.getXml(payment);
        } catch (Exception e) {
            throw e;
        }

        final String EXPECTED_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><payment><returnurl></returnurl><amount>0</amount><vat>0</vat><excludepaymentmethods></excludepaymentmethods></payment>";
        assertTrue(EXPECTED_XML.equals(xml));
    }
    
    @Test
    public void testPayPagePaymentSetLanguageCode() throws Exception {
        CreateOrderBuilder order = new CreateOrderBuilder();
        order.setCountryCode(COUNTRYCODE.SE);
        
        PayPagePayment payment = new PayPagePayment(order);
        payment.setPayPageLanguage("sv");
        payment.setPaymentMethod(PAYMENTMETHOD.SVEAINVOICEEU_SE);
        payment.calculateRequestValues();
        
        try {
            xml = xmlBuilder.getXml(payment);
        } catch (Exception e) {
            throw e;
        }
        
        final String EXPECTED_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><payment><paymentmethod>SVEAINVOICEEU_SE</paymentmethod><returnurl></returnurl><amount>0</amount><lang>sv</lang><vat>0</vat><excludepaymentmethods></excludepaymentmethods></payment>";
        assertEquals(EXPECTED_XML,xml);
    }
    
    @Test
    public void testPayPagePaymentSpecificXml() throws Exception {
        CreateOrderBuilder order = new CreateOrderBuilder();
        order.setCountryCode(COUNTRYCODE.SE);
        
        PayPagePayment payment = new PayPagePayment(order);
        payment.setPaymentMethod(PAYMENTMETHOD.SVEAINVOICEEU_SE);
        payment.calculateRequestValues();
        
        try {
            xml = xmlBuilder.getXml(payment);
        } catch (Exception e) {
            throw e;
        }
        
        final String EXPECTED_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><payment><paymentmethod>SVEAINVOICEEU_SE</paymentmethod><returnurl></returnurl><amount>0</amount><vat>0</vat><excludepaymentmethods></excludepaymentmethods></payment>";
        assertEquals(EXPECTED_XML,xml);
    }
}
