package se.sveaekonomi.webpay.integration.hosted.helper;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;

import se.sveaekonomi.webpay.integration.exception.SveaWebPayException;
import se.sveaekonomi.webpay.integration.hosted.HostedOrderRowBuilder;
import se.sveaekonomi.webpay.integration.hosted.payment.HostedPayment;
import se.sveaekonomi.webpay.integration.order.create.CreateOrderBuilder;
import se.sveaekonomi.webpay.integration.order.identity.CompanyCustomer;
import se.sveaekonomi.webpay.integration.order.identity.CustomerIdentity;
import se.sveaekonomi.webpay.integration.order.identity.IndividualCustomer;
import se.sveaekonomi.webpay.integration.util.xml.XMLBuilder;

public class HostedXmlBuilder extends XMLBuilder {
    
    public String getXml(HostedPayment<?> payment) throws Exception {
        XMLOutputFactory xmlof = XMLOutputFactory.newInstance();
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        CreateOrderBuilder order = payment.getCreateOrderBuilder();
        ArrayList<HostedOrderRowBuilder> rows = payment.getRowBuilder();
        
        xmlw = xmlof.createXMLStreamWriter(os, "UTF-8");
        xmlw.writeStartDocument("UTF-8", "1.0");
        xmlw.writeComment("Message generated by Integration package Java");// V + Config.version);
        xmlw.writeStartElement("payment");
        
        xmlw = payment.getPaymentSpecificXml(xmlw);
        writeSimpleElement("customerrefno", order.getClientOrderNumber());
        writeSimpleElement("returnurl", payment.getReturnUrl());
        writeSimpleElement("cancelurl", payment.getCancelUrl());
        writeSimpleElement("currency", order.getCurrency());
        writeSimpleElement("amount", payment.getAmount().toString());
        writeSimpleElement("lang", payment.getPayPageLanguageCode());
        
        serializeCustomer(order, payment);
        
        if (payment.getVat() != null) {
            writeSimpleElement("vat", payment.getVat().toString());
        }
        //TODO: add ip address
        serializeRows(rows);     
        if (payment.getExcludedPaymentMethods() != null) {
            xmlw.writeStartElement("excludepaymentmethods");
            
            List<String> excludeList =  payment.getExcludedPaymentMethods();
            for (int i = 0; i < excludeList.size(); i++) {
        		writeSimpleElement("exclude", excludeList.get(i));
        	}
            
            xmlw.writeEndElement();
        }
        writeSimpleElement("iscompany", order.getIsCompanyIdentity() ? "true" : "false");
        xmlw.writeEndDocument();
        
        try {
            return new String(os.toByteArray(), "UTF-8");
        } catch (UnsupportedEncodingException e) {
        	throw new SveaWebPayException("Unsupported encoding UTF-8", e);
        }
    }
    
    private void serializeCustomer(CreateOrderBuilder order,
			HostedPayment<?> payment) {
    	try {
    		CustomerIdentity<?> customer;
    		if(order.getIsCompanyIdentity())
    			customer = order.getCompanyCustomer();
    		else
    			customer = order.getIndividualCustomer();
    		
			xmlw.writeStartElement("customer");
			//nordic country individual customer type
			if(customer.getNationalIdNumber()!=null)
				writeSimpleElement("ssn", customer.getNationalIdNumber());
			//euro country individual
			else if(!order.getIsCompanyIdentity())
				writeSimpleElement("ssn", ((IndividualCustomer)customer).getBirthDate().toString());
			//euro country, Company customer and nationalId not set			
			else if(order.getIsCompanyIdentity())
				writeSimpleElement("ssn", ((CompanyCustomer)customer).getVatNumber());
			
			//set for individual customer
			if(!order.getIsCompanyIdentity()) {
				if(((IndividualCustomer)customer).getFirstName() != null)
					writeSimpleElement("firstname", ((IndividualCustomer)customer).getFirstName());
				if(((IndividualCustomer)customer).getLastName() != null)
					writeSimpleElement("lastname", ((IndividualCustomer)customer).getLastName());
				if(((IndividualCustomer)customer).getInitials() != null)
					writeSimpleElement("initials", ((IndividualCustomer)customer).getInitials());
				if(((IndividualCustomer)customer).getEmail() != null)
					writeSimpleElement("email", ((IndividualCustomer)customer).getEmail());
				if(((IndividualCustomer)customer).getPhoneNumber() != null)
					writeSimpleElement("phone", ((IndividualCustomer)customer).getPhoneNumber().toString());
				if(((IndividualCustomer)customer).getStreetAddress() != null)
					writeSimpleElement("address", ((IndividualCustomer)customer).getStreetAddress());
				if(((IndividualCustomer)customer).getHouseNumber() != null)
					writeSimpleElement("housenumber", ((IndividualCustomer)customer).getHouseNumber());
				if(((IndividualCustomer)customer).getCoAddress() != null)
					writeSimpleElement("address2", ((IndividualCustomer)customer).getCoAddress());
				if(((IndividualCustomer)customer).getLocality() != null)
					writeSimpleElement("city", ((IndividualCustomer)customer).getLocality().toString());				
			}
			if(order.getCountryCode() != null)
				writeSimpleElement("country", order.getCountryCode().toString());			
			xmlw.writeEndElement();
		} catch (XMLStreamException e) {
		
			e.printStackTrace();
		}
    	
		
	}

	private void serializeRows(List<HostedOrderRowBuilder> rows) throws XMLStreamException {
        if (rows == null || rows.size() == 0) {
            return;
        }
        
        xmlw.writeStartElement("orderrows");
        
        for (HostedOrderRowBuilder row : rows) {
            serializeRow(row);
        }
        
        xmlw.writeEndElement();
    }
    
    private void serializeRow(HostedOrderRowBuilder row) throws XMLStreamException {
        xmlw.writeStartElement("row");
        
        writeSimpleElement("sku", row.getSku());
        writeSimpleElement("name", row.getName());
        writeSimpleElement("description", row.getDescription());
        
        if (row.getAmount() != null) {
            writeSimpleElement("amount", row.getAmount().toString());
        }
        
        if (row.getVat() != null) {
            writeSimpleElement("vat", row.getVat().toString());
        }
        
        if (row.getQuantity() != 0) {
            writeSimpleElement("quantity", Integer.toString(row.getQuantity()));
        }

        writeSimpleElement("unit", row.getUnit());
        
        xmlw.writeEndElement();
    }
}
