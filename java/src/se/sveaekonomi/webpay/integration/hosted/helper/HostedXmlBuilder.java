package se.sveaekonomi.webpay.integration.hosted.helper;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;

import se.sveaekonomi.webpay.integration.hosted.HostedOrderRowBuilder;
import se.sveaekonomi.webpay.integration.hosted.payment.HostedPayment;
import se.sveaekonomi.webpay.integration.order.create.CreateOrderBuilder;
import se.sveaekonomi.webpay.integration.util.constant.PAYMENTMETHOD;
import se.sveaekonomi.webpay.integration.util.xml.XMLBuilder;

public class HostedXmlBuilder extends XMLBuilder {
    
    public String getXml(HostedPayment payment) throws Exception {
        XMLOutputFactory xmlof = XMLOutputFactory.newInstance();
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        CreateOrderBuilder order = payment.getCreateOrderBuilder();
        ArrayList<HostedOrderRowBuilder> rows = payment.getRowBuilder();
        
        xmlw = xmlof.createXMLStreamWriter(os, "UTF-8");
        xmlw.writeStartDocument("UTF-8", "1.0");
        xmlw.writeComment("Message generated by Integration package Java");// V + Config.version);
        xmlw.writeStartElement("payment");
        
        xmlw = payment.getPaymentSpecificXml(xmlw);
        writeSimpleElement("customerrefno", order.getClientOrderNumber());
        writeSimpleElement("returnurl", payment.getReturnUrl());
        writeSimpleElement("cancelurl", payment.getCancelUrl());
        writeSimpleElement("currency", order.getCurrency());
        writeSimpleElement("amount", payment.getAmount().toString());
        writeSimpleElement("lang", payment.getPayPageLanguageCode());
        
        if (payment.getVat() != null) {
            writeSimpleElement("vat", payment.getVat().toString());
        }
        
        serializeRows(rows);     
        if (payment.getExcludedPaymentMethods() != null) {
            xmlw.writeStartElement("excludepaymentmethods");
            
            for (PAYMENTMETHOD excludedPaymentMethod : payment.getExcludedPaymentMethods()) {
                writeSimpleElement("exclude", excludedPaymentMethod.toString());
            }
            
            xmlw.writeEndElement();
        }
        
        xmlw.writeEndDocument();
        
        try {
            return new String(os.toByteArray(), "UTF-8");
        } catch (UnsupportedEncodingException e) {
            throw new Exception("Unsupported encoding UTF-8", e);
        }
    }
    
    private void serializeRows(List<HostedOrderRowBuilder> rows) throws XMLStreamException {
        if (rows == null || rows.size() == 0) {
            return;
        }
        
        xmlw.writeStartElement("orderrows");
        
        for (HostedOrderRowBuilder row : rows) {
            serializeRow(row);
        }
        
        xmlw.writeEndElement();
    }
    
    private void serializeRow(HostedOrderRowBuilder row) throws XMLStreamException {
        xmlw.writeStartElement("row");
        
        writeSimpleElement("sku", row.getSku());
        writeSimpleElement("name", row.getName());
        writeSimpleElement("description", row.getDescription());
        
        if (row.getAmount() != null) {
            writeSimpleElement("amount", row.getAmount().toString());
        }
        
        if (row.getVat() != null) {
            writeSimpleElement("vat", row.getVat().toString());
        }
        
        if (row.getQuantity() != 0) {
            writeSimpleElement("quantity", Integer.toString(row.getQuantity()));
        }

        writeSimpleElement("unit", row.getUnit());
        
        xmlw.writeEndElement();
    }
}
